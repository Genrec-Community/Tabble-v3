#!/usr/bin/env python3
"""
Environment Synchronization Script for Tabble-v3
Syncs frontend .env file from root .env file to avoid duplication
"""

import os
import sys
from pathlib import Path
from typing import Dict, List, Set
import argparse


class EnvSynchronizer:
    """Synchronizes environment variables between root and frontend"""

    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.root_env = project_root / ".env"
        self.frontend_env = project_root / "frontend" / ".env"
        self.frontend_env_example = project_root / "frontend" / ".env.example"

    def load_env_file(self, file_path: Path) -> Dict[str, str]:
        """Load environment variables from file"""
        if not file_path.exists():
            return {}

        env_vars = {}
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                for line in f:
                    line = line.strip()
                    if not line or line.startswith("#"):
                        continue

                    if "=" in line:
                        key, value = line.split("=", 1)
                        env_vars[key.strip()] = value.strip()
        except Exception as e:
            print(f"‚ùå Error reading {file_path}: {e}")
            return {}

        return env_vars

    def get_frontend_variables(self) -> Set[str]:
        """Get list of variables that should be in frontend .env"""
        frontend_vars = {
            # API Configuration
            "REACT_APP_API_BASE_URL",
            # Application Environment
            "NODE_ENV",
            # Firebase Configuration
            "REACT_APP_FIREBASE_API_KEY",
            "REACT_APP_FIREBASE_AUTH_DOMAIN",
            "REACT_APP_FIREBASE_PROJECT_ID",
            "REACT_APP_FIREBASE_STORAGE_BUCKET",
            "REACT_APP_FIREBASE_MESSAGING_SENDER_ID",
            "REACT_APP_FIREBASE_APP_ID",
            # UI Configuration
            "REACT_APP_APP_NAME",
            "REACT_APP_DEFAULT_THEME",
            "REACT_APP_PRIMARY_COLOR",
            "REACT_APP_SECONDARY_COLOR",
            # Feature Flags
            "REACT_APP_ENABLE_ANALYTICS",
            "REACT_APP_ENABLE_NOTIFICATIONS",
            "REACT_APP_ENABLE_DEMO_MODE",
            "REACT_APP_ENABLE_OFFLINE_MODE",
            "REACT_APP_ENABLE_PWA",
            # Performance Configuration
            "REACT_APP_QUERY_CACHE_TIME",
            "REACT_APP_QUERY_STALE_TIME",
            "REACT_APP_IMAGE_LAZY_LOADING",
            "REACT_APP_DEFAULT_PAGE_SIZE",
            "REACT_APP_MAX_PAGE_SIZE",
            # HTTP Configuration
            "REACT_APP_HTTP_TIMEOUT",
            "REACT_APP_HTTP_RETRIES",
            # File Upload Configuration
            "REACT_APP_MAX_FILE_SIZE",
            "REACT_APP_ALLOWED_IMAGE_TYPES",
            "REACT_APP_UPLOAD_CHUNK_SIZE",
            # Session Configuration
            "REACT_APP_SESSION_TIMEOUT_MINUTES",
            "REACT_APP_SESSION_REFRESH_THRESHOLD",
            "REACT_APP_STORAGE_PREFIX",
            # OTP Configuration
            "REACT_APP_OTP_EXPIRY_MINUTES",
            # Analytics & Monitoring
            "REACT_APP_GOOGLE_ANALYTICS_ID",
            "REACT_APP_MIXPANEL_TOKEN",
            "REACT_APP_SENTRY_DSN",
            "REACT_APP_LOG_LEVEL",
            # Development Settings
            "REACT_APP_ENABLE_MSW",
            "REACT_APP_ENABLE_STORYBOOK",
            "REACT_APP_MOCK_API",
            # Debug Settings
            "REACT_APP_ENABLE_REDUX_LOGGER",
            "REACT_APP_ENABLE_API_LOGGER",
            "REACT_APP_SHOW_DEVTOOLS",
        }

        return frontend_vars

    def sync_env_files(self, force: bool = False) -> bool:
        """Sync frontend .env file from root .env file"""
        print("üîÑ Syncing environment files...\n")

        # Load root .env file
        if not self.root_env.exists():
            print("‚ùå Root .env file does not exist")
            return False

        root_vars = self.load_env_file(self.root_env)
        if not root_vars:
            print("‚ùå Cannot load root .env file")
            return False

        frontend_vars = self.get_frontend_variables()

        # Filter variables for frontend
        frontend_env_vars = {}
        missing_vars = []

        for var in frontend_vars:
            if var in root_vars:
                frontend_env_vars[var] = root_vars[var]
            else:
                missing_vars.append(var)

        if missing_vars:
            print(f"‚ö†Ô∏è  Missing variables in root .env: {', '.join(missing_vars)}")
            print("   These will be commented out in frontend .env\n")

        # Generate frontend .env content
        content_lines = [
            "# Tabble Frontend Configuration",
            "# This file is automatically generated from the root .env file",
            "# DO NOT EDIT DIRECTLY - Edit the root .env file instead",
            "",
        ]

        # Group variables by category
        sections = {
            "API Configuration": [
                "REACT_APP_API_BASE_URL",
            ],
            "Application Environment": [
                "NODE_ENV",
            ],
            "Firebase Configuration": [
                "REACT_APP_FIREBASE_API_KEY",
                "REACT_APP_FIREBASE_AUTH_DOMAIN",
                "REACT_APP_FIREBASE_PROJECT_ID",
                "REACT_APP_FIREBASE_STORAGE_BUCKET",
                "REACT_APP_FIREBASE_MESSAGING_SENDER_ID",
                "REACT_APP_FIREBASE_APP_ID",
            ],
            "UI Configuration": [
                "REACT_APP_APP_NAME",
                "REACT_APP_DEFAULT_THEME",
                "REACT_APP_PRIMARY_COLOR",
                "REACT_APP_SECONDARY_COLOR",
            ],
            "Feature Flags": [
                "REACT_APP_ENABLE_ANALYTICS",
                "REACT_APP_ENABLE_NOTIFICATIONS",
                "REACT_APP_ENABLE_DEMO_MODE",
                "REACT_APP_ENABLE_OFFLINE_MODE",
                "REACT_APP_ENABLE_PWA",
            ],
            "Performance Configuration": [
                "REACT_APP_QUERY_CACHE_TIME",
                "REACT_APP_QUERY_STALE_TIME",
                "REACT_APP_IMAGE_LAZY_LOADING",
                "REACT_APP_DEFAULT_PAGE_SIZE",
                "REACT_APP_MAX_PAGE_SIZE",
            ],
            "HTTP Configuration": [
                "REACT_APP_HTTP_TIMEOUT",
                "REACT_APP_HTTP_RETRIES",
            ],
            "File Upload Configuration": [
                "REACT_APP_MAX_FILE_SIZE",
                "REACT_APP_ALLOWED_IMAGE_TYPES",
                "REACT_APP_UPLOAD_CHUNK_SIZE",
            ],
            "Session Configuration": [
                "REACT_APP_SESSION_TIMEOUT_MINUTES",
                "REACT_APP_SESSION_REFRESH_THRESHOLD",
                "REACT_APP_STORAGE_PREFIX",
            ],
            "OTP Configuration": [
                "REACT_APP_OTP_EXPIRY_MINUTES",
            ],
            "Analytics & Monitoring": [
                "REACT_APP_GOOGLE_ANALYTICS_ID",
                "REACT_APP_MIXPANEL_TOKEN",
                "REACT_APP_SENTRY_DSN",
                "REACT_APP_LOG_LEVEL",
            ],
            "Development Settings": [
                "REACT_APP_ENABLE_MSW",
                "REACT_APP_ENABLE_STORYBOOK",
                "REACT_APP_MOCK_API",
            ],
            "Debug Settings": [
                "REACT_APP_ENABLE_REDUX_LOGGER",
                "REACT_APP_ENABLE_API_LOGGER",
                "REACT_APP_SHOW_DEVTOOLS",
            ],
        }

        for section_name, section_vars in sections.items():
            content_lines.extend(
                [
                    f"# {section_name}",
                ]
            )

            for var in section_vars:
                if var in frontend_env_vars:
                    content_lines.append(f"{var}={frontend_env_vars[var]}")
                elif var in missing_vars:
                    content_lines.append(f"# {var}=<value_from_root_env>")
                else:
                    content_lines.append(f"# {var}=<not_set>")

            content_lines.append("")

        # Write frontend .env file
        try:
            os.makedirs(self.frontend_env.parent, exist_ok=True)

            with open(self.frontend_env, "w", encoding="utf-8") as f:
                f.write("\n".join(content_lines))

            print(f"‚úÖ Successfully synced {self.frontend_env}")
            print(f"   Synced {len(frontend_env_vars)} variables")
            if missing_vars:
                print(
                    f"   ‚ö†Ô∏è  {len(missing_vars)} variables were missing and commented out"
                )

            return True

        except Exception as e:
            print(f"‚ùå Error writing frontend .env file: {e}")
            return False

    def check_sync_status(self) -> bool:
        """Check if frontend .env is in sync with root .env"""
        print("üîç Checking environment sync status...\n")

        if not self.root_env.exists():
            print("‚ùå Root .env file does not exist")
            return False

        if not self.frontend_env.exists():
            print("‚ùå Frontend .env file does not exist")
            return False

        root_vars = self.load_env_file(self.root_env)
        frontend_vars = self.load_env_file(self.frontend_env)
        expected_vars = self.get_frontend_variables()

        out_of_sync = []
        missing_in_frontend = []

        for var in expected_vars:
            if var in root_vars and var in frontend_vars:
                if root_vars[var] != frontend_vars[var]:
                    out_of_sync.append(var)
            elif var in root_vars and var not in frontend_vars:
                missing_in_frontend.append(var)

        if not out_of_sync and not missing_in_frontend:
            print("‚úÖ Frontend .env is in sync with root .env")
            return True

        if out_of_sync:
            print(f"‚ùå Out of sync variables: {', '.join(out_of_sync)}")

        if missing_in_frontend:
            print(f"‚ùå Missing variables in frontend: {', '.join(missing_in_frontend)}")

        print("\nüí° Run 'python scripts/sync_env.py' to sync the files")
        return False


def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(description="Sync Tabble-v3 environment files")
    parser.add_argument(
        "--check",
        action="store_true",
        help="Check if files are in sync without modifying",
    )
    parser.add_argument(
        "--force", action="store_true", help="Force sync even if files are identical"
    )
    parser.add_argument(
        "--project-root",
        type=Path,
        default=Path(__file__).parent.parent,
        help="Project root directory",
    )

    args = parser.parse_args()

    synchronizer = EnvSynchronizer(args.project_root)

    if args.check:
        success = synchronizer.check_sync_status()
    else:
        success = synchronizer.sync_env_files(force=args.force)

    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
